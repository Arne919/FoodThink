version: '3.8'

services:
  backend:
    build:
      context: ./BE
      dockerfile: Dockerfile
    container_name: my-backend-container-v2
    ports:
      - "8085:8080"
    environment:
      - DB_URL=${DB_URL}
      - DB_PASSWORD=${DB_PASSWORD}
      - SPRING_JWT_SECRET=${SPRING_JWT_SECRET}
      - AWS_CREDENTIALS_ACCESS_KEY=${AWS_CREDENTIALS_ACCESS_KEY}
      - AWS_CREDENTIALS_SECRET_KEY=${AWS_CREDENTIALS_SECRET_KEY}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - KAKAO_REDIRECT_URL=${KAKAO_REDIRECT_URL}
      - GPT_API_KEY=${GPT_API_KEY}
      - API_SERVICE_KEY=${API_SERVICE_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - DB_USERNAME=${DB_USERNAME}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - DIALOGFLOW_PROJECT_ID=${DIALOGFLOW_PROJECT_ID}
      - ELASTICSEARCH_URIS=${ELASTICSEARCH_URIS}
      - TZ=Asia/Seoul
    volumes:
      - /etc/localtime:/etc/localtime:ro
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
    networks:
      - backend_network
      - frontend_network

  frontend:
    build:
      context: ./FE/ffood_thing
      dockerfile: Dockerfile
    container_name: my-frontend-container-v2
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - backend

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
#    environment:
#      - node.name=elasticsearch
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#    ports:
#      - "9200:9200"
#    volumes:
#      - elasticsearch-data:/usr/share/elasticsearch/data
#    networks:
#      - backend_network
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://elasticsearch:9200" ]
#      interval: 30s
#      retries: 3
#      start_period: 10s
#      timeout: 10s
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.14.0
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    networks:
#      - backend_network

volumes:
  elasticsearch-data: {}

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge



#  nginx:
#    build:
#      context: ./nginx  # nginx 디렉토리에서 빌드
#      dockerfile: Dockerfile  # nginx 디렉토리 내의 Dockerfile 사용
#    container_name: my-nginx-container
#    ports:
#      - "443:443"
#      - "80:80"
#    volumes:
#      - ./letsencrypt:/etc/letsencrypt:ro  # SSL 인증서
#      - ./FE/ffood_thing/dist:/app/dist  # 프론트엔드 빌드 파일
##      - ./nginx.conf:/etc/nginx/nginx.conf  # nginx 설정 파일
##      - /var/jenkins_home/workspace/foodthink/nginx/nginx.conf:/etc/nginx/nginx.conf  # nginx 설정 파일
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#    #해당 경로 확인됨
#    depends_on:
#      - backend
#      - frontend


